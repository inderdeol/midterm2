using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using COMP2084MidtermW20.Data;
using COMP2084MidtermW20.Models;

namespace COMP2084MidtermW20.Controllers
{

    public class PartiesController : Controller
    {
        private readonly ApplicationDbContext _context;

        public PartiesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: Parties
        public async Task<IActionResult>
    Index()
    {
    return View(await _context.Party.ToListAsync());
    }

    // GET: Parties/Details/5
    public async Task<IActionResult>
        Details(int? id)
        {
        if (id == null)
        {
        return NotFound();
        }

        var party = await _context.Party
        .FirstOrDefaultAsync(m => m.PartyId == id);
        if (party == null)
        {
        return NotFound();
        }

        return View(party);
        }

        // GET: Parties/Create
        public IActionResult Create()
        {
        return View();
        }

        // POST: Parties/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult>
            Create([Bind("PartyId,Name,Logo")] Party party)
            {
            if (ModelState.IsValid)
            {
            _context.Add(party);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
            }
            return View(party);
            }

            // GET: Parties/Edit/5
            public async Task<IActionResult>
                Edit(int? id)
                {
                if (id == null)
                {
                return NotFound();
                }

                var party = await _context.Party.FindAsync(id);
                if (party == null)
                {
                return NotFound();
                }
                return View(party);
                }

                // POST: Parties/Edit/5
                // To protect from overposting attacks, please enable the specific properties you want to bind to, for
                // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
                [HttpPost]
                [ValidateAntiForgeryToken]
                public async Task<IActionResult>
                    Edit(int id, [Bind("PartyId,Name,Logo")] Party party)
                    {
                    if (id != party.PartyId)
                    {
                    return NotFound();
                    }

                    if (ModelState.IsValid)
                    {
                    try
                    {
                    _context.Update(party);
                    await _context.SaveChangesAsync();
                    }
                    catch (DbUpdateConcurrencyException)
                    {
                    if (!PartyExists(party.PartyId))
                    {
                    return NotFound();
                    }
                    else
                    {
                    throw;
                    }
                    }
                    return RedirectToAction(nameof(Index));
                    }
                    return View(party);
                    }

                    // GET: Parties/Delete/5
                    public async Task<IActionResult>
                        Delete(int? id)
                        {
                        if (id == null)
                        {
                        return NotFound();
                        }

                        var party = await _context.Party
                        .FirstOrDefaultAsync(m => m.PartyId == id);
                        if (party == null)
                        {
                        return NotFound();
                        }

                        return View(party);
                        }

                        // POST: Parties/Delete/5
                        [HttpPost, ActionName("Delete")]
                        [ValidateAntiForgeryToken]
                        public async Task<IActionResult>
                            DeleteConfirmed(int id)
                            {
                            var party = await _context.Party.FindAsync(id);
                            _context.Party.Remove(party);
                            await _context.SaveChangesAsync();
                            return RedirectToAction(nameof(Index));
                            }

                            private bool PartyExists(int id)
                            {
                            return _context.Party.Any(e => e.PartyId == id);
                            }
                            }
                            }
                            @model COMP2084MidtermW20.Models.Party
                            @{
                                ViewData["Title"] = "Edit";
                            }
                            <h1>Edit</h1>
                            <h4>Party</h4>
                            <hr />
                            <div class="row">
                                <div class="col-md-4">
                                    <form asp-action="Edit">
                                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                        <input type="hidden" asp-for="PartyId" />
                                        <div class="form-group">
                                            <label asp-for="Name" class="control-label"></label>
                                            <input asp-for="Name" class="form-control" />
                                            <span asp-validation-for="Name" class="text-danger"></span>
                                        </div>
                                        <div class="form-group">
                                            <label asp-for="Logo" class="control-label"></label>
                                            <input asp-for="Logo" class="form-control" />
                                            <span asp-validation-for="Logo" class="text-danger"></span>
                                        </div>
                                        <div class="form-group">
                                            <input type="submit" value="Save" class="btn btn-primary" />
                                        </div>
                                    </form>
                                </div>
                            </div>
                            <div>
                                <a asp-action="Index">Back to List</a>
                            </div>
                            @section Scripts {
                                @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
                            }
